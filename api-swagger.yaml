swagger: "2.0"
info:
  description: "This is the first version of the protein expression interface. It allows to exchange information about protein expression data. The API defintion has been designed using Swagger DL [http://swagger.io](http://swagger.io)."
  version: "0.0.1"
  title: "Proteomics Expression Interface"
  termsOfService: "https://github.com/bigbio/proxi-schemas/LICENSE.md"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "https://github.com/bigbio/proxi-schemas/LICENSE.md"
host: "proteomexchange.org"
basePath: "/ws/v1"
tags:
- name: "dataset"
  description: "A proteomics dataset"
  externalDocs:
    description: "Dataset definition"
    url: "https://github.com/bigbio/proxi-schemas/dataset/"
- name: "protein"
  description: "A protein identification across multiple datasets"
  externalDocs:
    description: "Protein definition"
    url: "https://github.com/bigbio/proxi-schemas/protein/"
- name: "peptide"
  description: "Peptide identification across multiple datasets"
  externalDocs:
    description: "Peptide definition"
    url: "https://github.com/bigbio/proxi-schemas/peptide/"
schemes:
- "http"
- "https"
paths:
  /dataset/findByAccession:
    get:
      tags:
      - "dataset"
      summary: "Find dataset by Accessions"
      description: "Find the datasets by Datasets by Accessions"
      operationId: "findByAccession"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "accession"
        in: "query"
        description: "Accession values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "Successful Operation"
          schema:
            type: "array"
            items:
              $ref: "/dataset/dataset.yaml"
        400:
          description: "Bad Request. Invalid Accession Requested"
        404:
          description: "No dataset has been found with the requested accessions"
  /dataset/findByAttributes:
    get:
      tags:
      - "dataset"
      summary: "Finds Datasets by Attributes"
      description: "Find datasets by keywords on any of the attributes of a dataset"
      operationId: "findByAttributes"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "keyword"
        in: "query"
        description: "keyword to query all the attributes of a dataset"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
            type: "array"
            items:
              $ref: "/dataset/dataset.yaml"
        400:
          description: "Bad Request. Invalid keyword Requested"
        404:
          description: "No dataset has been found with the requested keyword"
  /dataset/{datasetAccession}:
    get:
      tags:
      - "dataset"
      summary: "Find the dataset by the accession"
      description: "Returns a single pet"
      operationId: "getDatasetByAccession"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "datasetAccession"
        in: "path"
        description: "Accession of the Dataset return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
            $ref: "/dataset/dataset.yaml"
        400:
          description: "Bad Request. Invalid Accession Requested"
        404:
          description: "Dataset not found"
  /dataset/{datasetAccession}/proteins:
    get:
      tags:
      - "dataset"
      summary: "Get all the proteins at the level of Dataset"
      description: "Returns all the proteins reported at the level of Dataset"
      externalDocs:
        description: "Description about how to reports the proteins at the level of Dataset"
        url: "https://github.com/bigbio/proxi-schemas/dataset/"
      operationId: "getProteinsByDatasetAccession"
          produces:
          - "application/xml"
          - "application/json"
          parameters:
          - name: "datasetAccession"
            in: "path"
            description: "Accession of the Dataset to return proteins"
            required: true
            type: "string"
          responses:
            200:
              description: "Successful Operation"
              schema:
                $ref: "/dataset/dataset.yaml"
            400:
              description: "Bad Request. Invalid Accession Requested"
            404:
              description: "Dataset not found"


  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about PROXI"
  url: "http://github.com/bigbio/proxi-schemas/"